# 전역 변수와 지역 변수
- 전역 변수 : 프로그램이나 함수 외부에도 전달 가능한 변수
- 지역 변수 : 프로그램(쉘)이나 함수 내에서만 의미가 있는 변수

1. export를 사용한 전역 변수 선언
2. 변수가 정의된 외부 쉘을 실행 시키는 방식
    (특히 함수의 전달 시)


# 프로세스 확인 방법

예) loop.sh이 돌고 있는지 확인

ps -ef | grep loop.sh | grep -v grep
kic         3616    2027  0 10:33 pts/1    00:00:00 sh loop.sh
user       PID      PPID        

kill -9 PID

# set : 뒤에 나열되는, 뒤에 실행되는 명령어의 결과를 분리하여 위치변수에 저장
set 1111 2222 3333 
echo $1    :  1111 출력
echo $2    :  2222 출력

set $(ls -ld backup)    : ls -ld 결과를 공백으로 분리, 각 위치변수에 저장
echo $3    : kic(3번째 필드인 소유자명)

[ 참고 : set에 ls -l 파일명의 전달 시 오류 ]
set $(ls -ld test1.sh) 
 => ls -ld 결과를 공백으로 분리, 각 위치변수에 저장 시 첫번째 필드 값($1)에
-rw-rw-r-- 처럼 맨 앞에 '-' 기호가 삽입되어 있어 -rw를 set 변수로 인식하여 옵션 에러 발생


# 파일과 디렉토리 권한
- ls -l 결과의 첫번째 필드에 출력
- rw-rw-r--
d rw-rw-r--

1) 권한의 형태

[본인권한][그룹권한][기타권한]

- 본인권한 : 파일 소유자가 갖는 권한
- 그룹권한 : 파일 소유자와 같은 그룹에 속한 사용자들이 갖는 권한
- 기타권한 : 기타 사용자들이 갖는 권한

2) 권한의 종류
- r  : 읽기 권한(디렉토리일 경우 디렉토리 안 내용 보기)
- w : 쓰기 권한(디렉토리에 파일 및 디렉토리 쓰기(저장))
- x  : 실행 권한(디렉토리 들어가기)

3) 권한 변경
chmod 권한 변경대상

3-1) 숫자 모드
r  권한은 2^2 = 4의 값 할당
w 권한은 2^1 = 2의 값 할당
x  권한은 2^0 = 1의 값 할당

예) rwxrwxr-x 에서 rwxr-xr-x 으로 변경 : chmod 755 test
     rwxr-xr-x  에서 rw-r--r-- 으로 변경 : chmod 755 test

3-2) 기호 모드 : 권한을 어느 그룹에 부여/회수에 대한 전달 용이

+ : 권한부여
-  : 권한 회수

a : 전체 그룹
u : 첫번째 그룹(소유자권한)
g : 두번째 그룹(그룹권한)
o : 세번째 그룹(기타권한)

예)
a+x     : 전체 사용자에 실행권한 추가
u-x      : 첫번째 그룹에 실행권한 회수
ug+rw : 첫번째와 두번째 그루에 읽기, 쓰기 권한 추가

[ 연습 문제 ]
1. 다음의 파일을 생성한 후 권한을 변경하세요
file1    r--r--r--
chmod 444 file1
chmod ug-w file1

file2    rwxr--r--
chmod 744 file2

file3    rw-rw-rw-
chmod o+w file3


[ 연습 문제 - test11.sh ]
*.sh 파일들에 대한 권한을 확인 한 후
소유자 이외의 권한을 갖는 파일의 목록을 del_write.list 파일에 저장하고
쓰기 권한을 회수하여라

--------------------
#!/bin/sh

# 사용자 정의함수에서의 전역 변수 선언
# 외부 쉘 실행
. ./exp1.sh

# 함수의 실행
func1 10 20
func2 100 200

echo $var1
kic@kic-virtual-machine:~/linux_ex/ch9$ cat test11.sh
#!/bin/sh

# 파일 권한 확인 후 권한 수정하기

for fname in $(ls *.sh)
do
  v1=$(ls -l $fname | cut -c6)
  v2=$(ls -l $fname | cut -c9)

  if [ $v1 = "w" -o $v2 = "w" ]
  then
    echo $fname >> del_write.list
    chmod go-w $fname
  fi
done


# 참고 : if문의 명령어 전달 시
if grep -w ^kic /etc/passwd > /dev/null 2>&1
then
   echo "kic 유저가 있습니다"
fi

grep -w ^kic /etc/passwd > /dev/null 2>&1
if [ $? -eq 0 ]               # $? 바로 이전 수행 결과의 참 거짓 저장
then
   echo "kic 유저가 있습니다"
fi

--------------------

# sed : 비대화형 편집기
- 명령어로 일괄적 파일을 편집할 수 있음
- 원본은 수정하지 않음

[ 문법 ]
sed '옵션' 파일명

1. 치환
sed 's/찾을문자열/바꿀문자열' 파일명        : 매 라인마다 한 번의 치환 발생
sed 's/찾을문자열/바꿀문자열/g' 파일명     : 매 라인마다 모든 문자에 대한 치환 발생
sed '10s/찾을문자열/바꿀문자열/g' 파일명  : 10 라인 모든 문자에 대한 치환 발생
sed 's/usr//' test.txt                                 : usr 단어 삭제

2. 삭제
sed '1d' test.txt      # 첫번째 줄 삭제
sed '1,3d' test.txt    # 1~3번째 줄 삭제
sed '3,$d' test.txt    # 세번째부터 끝라인까지 삭제
sed '/for/d' test.txt  # for 단어가 포함된 라인 삭제

3. 출력
sed '1,3p' for.sh      : 1~3 라인 반복 출력
sed -n '1,3p' for.sh  : 1~3 라인만 출력

4. 입력
sed '1i\abcd' for.sh  : 첫번째 라인에 abcd 입력
sed '1a\abcd' for.sh : 첫번째 라인 다음에 abcd 입력


[ 연습 문제 ] 
*.sh에 대해 맨 윗 줄의 #!/usr/bin/sh를 #!/bin/sh로 변경하여 저장하세요
sed 's/\/usr//g' *.sh
